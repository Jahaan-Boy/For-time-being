#include <iostream>
#include <unordered_map>
#include <list>
#include <map>
using namespace std;
class Graph {
public:
    unordered_map<char, list<char>> adjList;
    void addEdge(char u, char v) {
        adjList[u].push_back(v);
        adjList[v].push_back(u);
    }
    void dfsUtil(char node, map<char, bool>& visited) {
        visited[node] = true;
        cout << node << " ";
        for (char neighbor : adjList[node]) {
            if (!visited[neighbor]) {
                dfsUtil(neighbor, visited);
            }
        }
    }
    void dfs(char start) {
        map<char, bool> visited;
        dfsUtil(start, visited);
    }
};
int main() {
    Graph g;
    g.addEdge('A', 'B');
    g.addEdge('A', 'C');
    g.addEdge('B', 'D');
    g.addEdge('B', 'E');
    g.addEdge('C', 'F');
    g.addEdge('E', 'F');
    cout << "DFS starting from node A: ";
    g.dfs('A');
    cout << endl;
    return 0;
}
